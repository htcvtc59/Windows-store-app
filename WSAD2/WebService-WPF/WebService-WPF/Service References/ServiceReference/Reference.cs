//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace WebService_WPF.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://services.aonaware.com/webservices/", ConfigurationName="ServiceReference.DictServiceSoap")]
    public interface DictServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/ServerInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ServerInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/DictionaryList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<WebService_WPF.ServiceReference.Dictionary[]> DictionaryListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/DictionaryListExtended", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<WebService_WPF.ServiceReference.Dictionary[]> DictionaryListExtendedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/DictionaryInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DictionaryInfoAsync(string dictId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/Define", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<WebService_WPF.ServiceReference.WordDefinition> DefineAsync(string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/DefineInDict", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<WebService_WPF.ServiceReference.WordDefinition> DefineInDictAsync(string dictId, string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/StrategyList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<WebService_WPF.ServiceReference.Strategy[]> StrategyListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/Match", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<WebService_WPF.ServiceReference.DictionaryWord[]> MatchAsync(string word, string strategy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/MatchInDict", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<WebService_WPF.ServiceReference.DictionaryWord[]> MatchInDictAsync(string dictId, string word, string strategy);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Dictionary : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class DictionaryWord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string dictionaryIdField;
        
        private string wordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string DictionaryId {
            get {
                return this.dictionaryIdField;
            }
            set {
                this.dictionaryIdField = value;
                this.RaisePropertyChanged("DictionaryId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Word {
            get {
                return this.wordField;
            }
            set {
                this.wordField = value;
                this.RaisePropertyChanged("Word");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Strategy : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Definition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string wordField;
        
        private Dictionary dictionaryField;
        
        private string wordDefinitionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Word {
            get {
                return this.wordField;
            }
            set {
                this.wordField = value;
                this.RaisePropertyChanged("Word");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dictionary Dictionary {
            get {
                return this.dictionaryField;
            }
            set {
                this.dictionaryField = value;
                this.RaisePropertyChanged("Dictionary");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string WordDefinition {
            get {
                return this.wordDefinitionField;
            }
            set {
                this.wordDefinitionField = value;
                this.RaisePropertyChanged("WordDefinition");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class WordDefinition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string wordField;
        
        private Definition[] definitionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Word {
            get {
                return this.wordField;
            }
            set {
                this.wordField = value;
                this.RaisePropertyChanged("Word");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public Definition[] Definitions {
            get {
                return this.definitionsField;
            }
            set {
                this.definitionsField = value;
                this.RaisePropertyChanged("Definitions");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DictServiceSoapChannel : WebService_WPF.ServiceReference.DictServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DictServiceSoapClient : System.ServiceModel.ClientBase<WebService_WPF.ServiceReference.DictServiceSoap>, WebService_WPF.ServiceReference.DictServiceSoap {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DictServiceSoapClient() : 
                base(DictServiceSoapClient.GetDefaultBinding(), DictServiceSoapClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.DictServiceSoap.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DictServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(DictServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), DictServiceSoapClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DictServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DictServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DictServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DictServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DictServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> ServerInfoAsync() {
            return base.Channel.ServerInfoAsync();
        }
        
        public System.Threading.Tasks.Task<WebService_WPF.ServiceReference.Dictionary[]> DictionaryListAsync() {
            return base.Channel.DictionaryListAsync();
        }
        
        public System.Threading.Tasks.Task<WebService_WPF.ServiceReference.Dictionary[]> DictionaryListExtendedAsync() {
            return base.Channel.DictionaryListExtendedAsync();
        }
        
        public System.Threading.Tasks.Task<string> DictionaryInfoAsync(string dictId) {
            return base.Channel.DictionaryInfoAsync(dictId);
        }
        
        public System.Threading.Tasks.Task<WebService_WPF.ServiceReference.WordDefinition> DefineAsync(string word) {
            return base.Channel.DefineAsync(word);
        }
        
        public System.Threading.Tasks.Task<WebService_WPF.ServiceReference.WordDefinition> DefineInDictAsync(string dictId, string word) {
            return base.Channel.DefineInDictAsync(dictId, word);
        }
        
        public System.Threading.Tasks.Task<WebService_WPF.ServiceReference.Strategy[]> StrategyListAsync() {
            return base.Channel.StrategyListAsync();
        }
        
        public System.Threading.Tasks.Task<WebService_WPF.ServiceReference.DictionaryWord[]> MatchAsync(string word, string strategy) {
            return base.Channel.MatchAsync(word, strategy);
        }
        
        public System.Threading.Tasks.Task<WebService_WPF.ServiceReference.DictionaryWord[]> MatchInDictAsync(string dictId, string word, string strategy) {
            return base.Channel.MatchInDictAsync(dictId, word, strategy);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.DictServiceSoap)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.DictServiceSoap)) {
                return new System.ServiceModel.EndpointAddress("http://services.aonaware.com/DictService/DictService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return DictServiceSoapClient.GetBindingForEndpoint(EndpointConfiguration.DictServiceSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return DictServiceSoapClient.GetEndpointAddress(EndpointConfiguration.DictServiceSoap);
        }
        
        public enum EndpointConfiguration {
            
            DictServiceSoap,
        }
    }
}
